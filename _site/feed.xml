<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-09T14:51:26+07:00</updated><id>http://localhost:4000/</id><title type="html">ngoc’s blog</title><subtitle>This blog is about my experiences in software development, I hope you can find something useful!</subtitle><entry><title type="html">Secure s3 cloudfont content with Signed Cookies and Signed URLs</title><link href="http://localhost:4000/sercure-s3-cloudfront/" rel="alternate" type="text/html" title="Secure s3 cloudfont content with Signed Cookies and Signed URLs" /><published>2018-10-27T00:00:00+07:00</published><updated>2018-10-27T00:00:00+07:00</updated><id>http://localhost:4000/sercure-s3-cloudfront</id><content type="html" xml:base="http://localhost:4000/sercure-s3-cloudfront/">&lt;h1 id=&quot;serve-s3-cloudfront-secure-conent&quot;&gt;Serve s3 cloudfront secure conent&lt;/h1&gt;
&lt;p&gt;Use case:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Many companies that distribute content over the internet want to restrict access to documents, business data, media streams, or content that is intended for selected users, for example, users who have paid a fee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html&quot;&gt;Source article from amazon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have two options to secure you content&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Signed URLs&lt;/li&gt;
  &lt;li&gt;Signed Cookies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Choosing between Signed URLs and Signed Cookies &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-choosing-signed-urls-cookies.html&quot;&gt;Signed URLs and Signed Cookies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post I just write about signed cookies&lt;/p&gt;
&lt;h2 id=&quot;signed-cookies&quot;&gt;Signed Cookies&lt;/h2&gt;
&lt;p&gt;Basically you need to set 3 cookies like below:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudFront-Expires&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudFront-Signature&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudFront-Key-Pair-Id&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-Cookie:
Domain=optional domain name;
Path=/optional directory path;
Secure;
HttpOnly;
CloudFront-Expires=date and time in Unix time format (in seconds) and Coordinated Universal Time (UTC)

Set-Cookie:
Domain=optional domain name;
Path=/optional directory path;
Secure;
HttpOnly;
CloudFront-Signature=hashed and signed version of the policy statement

Set-Cookie:
Domain=optional domain name;
Path=/optional directory path;
Secure;
HttpOnly;
CloudFront-Key-Pair-Id=active CloudFront key pair Id for the key pair that you are using to generate the signature
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;luckily-amazon-have-libraries-for-us&quot;&gt;Luckily amazon have libraries for us&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-go/api/service/cloudfront/sign/#CookieSigner.Sign&quot;&gt;GO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CFPrivateDistJavaDevelopment.html&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateCFSignatureCodeAndExamples.html&quot;&gt;Others&lt;/a&gt;
Example using go library&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewCookieSigner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;privKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Get Signed cookies for a resource that will expire in 1 hour&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed to create signed cookies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Or get Signed cookies for a resource that will expire in 1 hour&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// and set path and domain of cookies&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CookieOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.example.com&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed to create signed cookies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Server Response via http.ResponseWriter&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Where can I get &lt;code class=&quot;highlighter-rouge&quot;&gt;keyID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;privKey&lt;/code&gt;?
You can follow this steps: &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html#private-content-creating-cloudfront-key-pairs&quot;&gt;Creating CloudFront Key Pairs&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;deal-with-domain&quot;&gt;Deal with domain&lt;/h3&gt;
&lt;p&gt;Default cloudfront domain look like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://xyz.cloudfront.net&lt;/code&gt;, so you &lt;code class=&quot;highlighter-rouge&quot;&gt;can not&lt;/code&gt; set cookie for that domain.
If you own the domain &lt;code class=&quot;highlighter-rouge&quot;&gt;www.yourdomain.com&lt;/code&gt; then you will need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;xyz.cloudfront.net&lt;/code&gt;
So instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;xyz.cloudfront.net/image1.png&lt;/code&gt; now you can access from &lt;code class=&quot;highlighter-rouge&quot;&gt;yourdomain.com/image1.png&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Serve s3 cloudfront secure conent Use case: Many companies that distribute content over the internet want to restrict access to documents, business data, media streams, or content that is intended for selected users, for example, users who have paid a fee Source article from amazon You have two options to secure you content Signed URLs Signed Cookies Choosing between Signed URLs and Signed Cookies Signed URLs and Signed Cookies In this post I just write about signed cookies Signed Cookies Basically you need to set 3 cookies like below: CloudFront-Expires CloudFront-Signature CloudFront-Key-Pair-Id Example: Set-Cookie: Domain=optional domain name; Path=/optional directory path; Secure; HttpOnly; CloudFront-Expires=date and time in Unix time format (in seconds) and Coordinated Universal Time (UTC) Set-Cookie: Domain=optional domain name; Path=/optional directory path; Secure; HttpOnly; CloudFront-Signature=hashed and signed version of the policy statement Set-Cookie: Domain=optional domain name; Path=/optional directory path; Secure; HttpOnly; CloudFront-Key-Pair-Id=active CloudFront key pair Id for the key pair that you are using to generate the signature Luckily amazon have libraries for us GO Java Others Example using go library s := sign.NewCookieSigner(keyID, privKey) // Get Signed cookies for a resource that will expire in 1 hour cookies, err := s.Sign(&quot;*&quot;, time.Now().Add(1 * time.Hour)) if err != nil { fmt.Println(&quot;failed to create signed cookies&quot;, err) return } // Or get Signed cookies for a resource that will expire in 1 hour // and set path and domain of cookies cookies, err := s.Sign(&quot;*&quot;, time.Now().Add(1 * time.Hour), func(o *sign.CookieOptions) { o.Path = &quot;/&quot; o.Domain = &quot;.example.com&quot; }) if err != nil { fmt.Println(&quot;failed to create signed cookies&quot;, err) return } // Server Response via http.ResponseWriter for _, c := range cookies { http.SetCookie(w, c) } Where can I get keyID and privKey? You can follow this steps: Creating CloudFront Key Pairs Deal with domain Default cloudfront domain look like this: http://xyz.cloudfront.net, so you can not set cookie for that domain. If you own the domain www.yourdomain.com then you will need to add a CNAME to xyz.cloudfront.net So instead of xyz.cloudfront.net/image1.png now you can access from yourdomain.com/image1.png</summary></entry><entry><title type="html">naming-classes-how-to-avoid-calling-everything-a-whatevermanager</title><link href="http://localhost:4000/naming-classes-how-to-avoid-calling-everything-a-whatevermanager/" rel="alternate" type="text/html" title="naming-classes-how-to-avoid-calling-everything-a-whatevermanager" /><published>2018-10-27T00:00:00+07:00</published><updated>2018-10-27T00:00:00+07:00</updated><id>http://localhost:4000/naming-classes-how-to-avoid-calling-everything-a-whatevermanager</id><content type="html" xml:base="http://localhost:4000/naming-classes-how-to-avoid-calling-everything-a-whatevermanager/">&lt;p&gt;source: https://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager
Here’s a little summary of what I learned from this question in the meantime.&lt;/p&gt;

&lt;p&gt;Try not to create new metaphors (Nanny)
Have a look at what other frameworks do
Further articles/books on this topic:&lt;/p&gt;

&lt;p&gt;What names do you find yourself prepending/appending to classes regularly?
What’s the best approach to naming classes?
Book: Design Patterns: Elements of Reusable Object-Oriented Software (Hardcover)
Book: Patterns of Enterprise Application Architecture (Hardcover)
Book: Implementation Patterns (Paperback)
And a current list of name prefixes/suffixes I collected (subjectively!) from the answers:&lt;/p&gt;

&lt;p&gt;Coordinator
Builder
Writer
Reader
Handler
Container
Protocol
Target
Converter
Controller
View
Factory
Entity
Bucket
And a good tip for the road:&lt;/p&gt;

&lt;p&gt;Don’t get naming paralysis. Yes, names are very important but they’re not important enough to waste huge amounts of time on. If you can’t think up a good name in 10 minutes, move on.&lt;/p&gt;</content><author><name></name></author><summary type="html">source: https://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager Here’s a little summary of what I learned from this question in the meantime. Try not to create new metaphors (Nanny) Have a look at what other frameworks do Further articles/books on this topic: What names do you find yourself prepending/appending to classes regularly? What’s the best approach to naming classes? Book: Design Patterns: Elements of Reusable Object-Oriented Software (Hardcover) Book: Patterns of Enterprise Application Architecture (Hardcover) Book: Implementation Patterns (Paperback) And a current list of name prefixes/suffixes I collected (subjectively!) from the answers: Coordinator Builder Writer Reader Handler Container Protocol Target Converter Controller View Factory Entity Bucket And a good tip for the road: Don’t get naming paralysis. Yes, names are very important but they’re not important enough to waste huge amounts of time on. If you can’t think up a good name in 10 minutes, move on.</summary></entry><entry><title type="html">Git Rebase</title><link href="http://localhost:4000/git-rebase/" rel="alternate" type="text/html" title="Git Rebase" /><published>2018-09-13T00:00:00+07:00</published><updated>2018-09-13T00:00:00+07:00</updated><id>http://localhost:4000/git-rebase</id><content type="html" xml:base="http://localhost:4000/git-rebase/">&lt;blockquote&gt;
  &lt;p&gt;git rebase in its simplest form is a command which will merge another branch
into the branch where you are currently working,
and move all of the local commits that are ahead of the rebased branch to the top of the history
on that branch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;source:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://nathanleclaire.com/blog/2014/09/14/dont-be-scared-of-git-rebase/&lt;/li&gt;
  &lt;li&gt;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">git rebase in its simplest form is a command which will merge another branch into the branch where you are currently working, and move all of the local commits that are ahead of the rebased branch to the top of the history on that branch. source: https://nathanleclaire.com/blog/2014/09/14/dont-be-scared-of-git-rebase/ https://www.atlassian.com/git/tutorials/merging-vs-rebasing</summary></entry><entry><title type="html">Spring security</title><link href="http://localhost:4000/spring-security/" rel="alternate" type="text/html" title="Spring security" /><published>2018-06-13T00:00:00+07:00</published><updated>2018-06-13T00:00:00+07:00</updated><id>http://localhost:4000/spring-security</id><content type="html" xml:base="http://localhost:4000/spring-security/">&lt;h3 id=&quot;what-is-the-default-authenticationmanager-in-spring-security&quot;&gt;What is the default authenticationmanager in spring security&lt;/h3&gt;
&lt;p&gt;The AuthenticationManager is really just a container for authentication providers, giving a consistent interface to them all. In most cases, the default AuthenticationManager is more than sufficient.
When you call
.authenticate(new UsernamePasswordAuthenticationToken(username, password))`
it is passing the UsernamePasswordAuthenticationToken to the default AuthenticationProvider, which will use the userDetailsService to get the user based on username and compare that user’s password with the one in the authentication token.
In general, the AuthenticationManager passes some sort of AuthenticationToken to the each of it’s AuthenticationProviders and they each inspect it and, if they can use it to authenticate, they return with an indication of “Authenticated”, “Unauthenticated”, or “Could not authenticate” (which indicates the provider did not know how to handle the token, so it passed on processing it)
This is the mechanism that allows you to plug in other authentication schemes, like authenticating against an LDAP or Active Directory server, or OpenID, and is one of the main extension points within the Spring Security framework.&lt;/p&gt;

&lt;p&gt;Spring Security ships only one real AuthenticationManager implementation:
org.springframework.security.authentication.ProviderManager
This uses different AuthenticationProvider for the authentication tasks
The AuthenticationManagerBeanDefinitionParser is responsible to parse &lt;sec:authentication-manager&gt; its java doc states:
Registers the central ProviderManager used by the namespace configuration, and allows the configuration of an alias, allowing users to reference it in their beans and clearly see where the name is coming from.
It creates the ProviderManager and adds the specified provides. If no provides is specified in the xml, then it adds an NullAuthenticationProvider. This is at least a provider that does noting than preventing configuration exceptions.&lt;/sec:authentication-manager&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">What is the default authenticationmanager in spring security The AuthenticationManager is really just a container for authentication providers, giving a consistent interface to them all. In most cases, the default AuthenticationManager is more than sufficient. When you call .authenticate(new UsernamePasswordAuthenticationToken(username, password))` it is passing the UsernamePasswordAuthenticationToken to the default AuthenticationProvider, which will use the userDetailsService to get the user based on username and compare that user’s password with the one in the authentication token. In general, the AuthenticationManager passes some sort of AuthenticationToken to the each of it’s AuthenticationProviders and they each inspect it and, if they can use it to authenticate, they return with an indication of “Authenticated”, “Unauthenticated”, or “Could not authenticate” (which indicates the provider did not know how to handle the token, so it passed on processing it) This is the mechanism that allows you to plug in other authentication schemes, like authenticating against an LDAP or Active Directory server, or OpenID, and is one of the main extension points within the Spring Security framework. Spring Security ships only one real AuthenticationManager implementation: org.springframework.security.authentication.ProviderManager This uses different AuthenticationProvider for the authentication tasks The AuthenticationManagerBeanDefinitionParser is responsible to parse its java doc states: Registers the central ProviderManager used by the namespace configuration, and allows the configuration of an alias, allowing users to reference it in their beans and clearly see where the name is coming from. It creates the ProviderManager and adds the specified provides. If no provides is specified in the xml, then it adds an NullAuthenticationProvider. This is at least a provider that does noting than preventing configuration exceptions.</summary></entry><entry><title type="html">Learn English Resources</title><link href="http://localhost:4000/learn-english-resources/" rel="alternate" type="text/html" title="Learn English Resources" /><published>2018-04-18T00:00:00+07:00</published><updated>2018-04-18T00:00:00+07:00</updated><id>http://localhost:4000/learn-english-resources</id><content type="html" xml:base="http://localhost:4000/learn-english-resources/">&lt;ul&gt;
  &lt;li&gt;original post: https://vozforums.com/showthread.php?t=6129889&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;english-podcast&quot;&gt;English Podcast&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://softwareengineeringdaily.com/
    &lt;blockquote&gt;
      &lt;p&gt;I like speaker voice, it’s also have transcript for you&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vocabulary&quot;&gt;Vocabulary&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Anki is great fashcard app for you to learn vocabulary https://apps.ankiweb.net/&lt;/li&gt;
  &lt;li&gt;Doulingo  https://www.duolingo.com/&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">original post: https://vozforums.com/showthread.php?t=6129889 English Podcast https://softwareengineeringdaily.com/ I like speaker voice, it’s also have transcript for you Vocabulary Anki is great fashcard app for you to learn vocabulary https://apps.ankiweb.net/ Doulingo https://www.duolingo.com/</summary></entry><entry><title type="html">My vim setup</title><link href="http://localhost:4000/my-vim-setup/" rel="alternate" type="text/html" title="My vim setup" /><published>2018-02-03T00:00:00+07:00</published><updated>2018-02-03T00:00:00+07:00</updated><id>http://localhost:4000/my-vim-setup</id><content type="html" xml:base="http://localhost:4000/my-vim-setup/"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Reward Spiner Js</title><link href="http://localhost:4000/reward-spiner-js/" rel="alternate" type="text/html" title="Reward Spiner Js" /><published>2018-01-04T00:00:00+07:00</published><updated>2018-01-04T00:00:00+07:00</updated><id>http://localhost:4000/reward-spiner-js</id><content type="html" xml:base="http://localhost:4000/reward-spiner-js/">&lt;h2&gt;Reward Spiner in Js&lt;/h2&gt;

&lt;p data-height=&quot;502&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;BJwjqz&quot; data-default-tab=&quot;result&quot; data-user=&quot;ngocvt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Reward Spiner Js&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/ngocvt/pen/BJwjqz/&quot;&gt;Reward Spiner Js&lt;/a&gt; by ngocvt.dev (&lt;a href=&quot;https://codepen.io/ngocvt&quot;&gt;@ngocvt&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;</content><author><name></name></author><summary type="html">Reward Spiner in Js See the Pen Reward Spiner Js by ngocvt.dev (@ngocvt) on CodePen.</summary></entry><entry><title type="html">Heorku Notes</title><link href="http://localhost:4000/heorku-notes/" rel="alternate" type="text/html" title="Heorku Notes" /><published>2018-01-04T00:00:00+07:00</published><updated>2018-01-04T00:00:00+07:00</updated><id>http://localhost:4000/heorku-notes</id><content type="html" xml:base="http://localhost:4000/heorku-notes/">&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$heroku&lt;/span&gt; create                                                            
 ▸    heroku-cli: update available from 6.11.10-532d137 to 6.15.5-1f03166
Creating app... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;, ⬢ immense-retreat-69551
https://immense-retreat-69551.herokuapp.com/ | https://git.heroku.com/immense-retreat-69551.git

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote -v                                                             
heroku	https://git.heroku.com/immense-retreat-69551.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
heroku	https://git.heroku.com/immense-retreat-69551.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
origin	https://github.com/ngocvtdev/sample-room-java.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
origin	https://github.com/ngocvtdev/sample-room-java.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;profile-web&quot;&gt;Profile web&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;web: command
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">$heroku create ▸ heroku-cli: update available from 6.11.10-532d137 to 6.15.5-1f03166 Creating app... done, ⬢ immense-retreat-69551 https://immense-retreat-69551.herokuapp.com/ | https://git.heroku.com/immense-retreat-69551.git git remote -v heroku https://git.heroku.com/immense-retreat-69551.git (fetch) heroku https://git.heroku.com/immense-retreat-69551.git (push) origin https://github.com/ngocvtdev/sample-room-java.git (fetch) origin https://github.com/ngocvtdev/sample-room-java.git (push) Profile web web: command</summary></entry><entry><title type="html">Vim in VS shortcut</title><link href="http://localhost:4000/productivity/vs-vim-shortcut/" rel="alternate" type="text/html" title="Vim in VS shortcut" /><published>2017-12-30T00:00:00+07:00</published><updated>2017-12-30T00:00:00+07:00</updated><id>http://localhost:4000/productivity/vs-vim-shortcut</id><content type="html" xml:base="http://localhost:4000/productivity/vs-vim-shortcut/">&lt;h2 id=&quot;vs-shortcut&quot;&gt;VS shortcut&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + b&lt;/code&gt;: show/hide file explorer&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + opt+right arrow/left arrow&lt;/code&gt;: next/previous tab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd \&lt;/code&gt;: split view&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vim-shortcut&quot;&gt;Vim shortcut&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;copy then paste replace:
ex:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;list.add(abc)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;aff&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vib&lt;/code&gt;: slellect inside block ()&lt;/li&gt;
  &lt;li&gt;Inside a yarenthesis blocky, I use vib (“select inner block”)&lt;/li&gt;
  &lt;li&gt;Inside a curly braces block you can use viB (“capital B”)&lt;/li&gt;
  &lt;li&gt;To make the selections “inclusive” (select also the quotes, parenthesis or braces) you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;surround:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d s&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;existing char&amp;gt;&lt;/code&gt;	Delete existing surround&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c s&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;existing char&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;desired char&amp;gt;&lt;/code&gt;	Change surround existing to desired&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y s&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;motion&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;desired char&amp;gt;&lt;/code&gt;	Surround something with something using motion (as in “you surround”)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;desired char&amp;gt;&lt;/code&gt;	Surround when in visual modes (surrounds full selection)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">VS shortcut cmd + b: show/hide file explorer cmd + opt+right arrow/left arrow: next/previous tab cmd \: split view Vim shortcut copy then paste replace: ex: {( list.add(abc) aff ) } vib: slellect inside block () Inside a yarenthesis blocky, I use vib (“select inner block”) Inside a curly braces block you can use viB (“capital B”) To make the selections “inclusive” (select also the quotes, parenthesis or braces) you can use a instead of i. surround: d s &amp;lt;existing char&amp;gt; Delete existing surround c s &amp;lt;existing char&amp;gt; &amp;lt;desired char&amp;gt; Change surround existing to desired y s &amp;lt;motion&amp;gt; &amp;lt;desired char&amp;gt; Surround something with something using motion (as in “you surround”) S &amp;lt;desired char&amp;gt; Surround when in visual modes (surrounds full selection)</summary></entry><entry><title type="html">Productivity tools</title><link href="http://localhost:4000/productivity/productivity-tools/" rel="alternate" type="text/html" title="Productivity tools" /><published>2017-12-30T00:00:00+07:00</published><updated>2017-12-30T00:00:00+07:00</updated><id>http://localhost:4000/productivity/productivity-tools</id><content type="html" xml:base="http://localhost:4000/productivity/productivity-tools/">&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://trello.com&quot;&gt;Trello&lt;/a&gt; for tasks management&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pomelloapp.com&quot;&gt;Pomello App&lt;/a&gt; Pomello turns your Trello cards into Pomodoro® tasks.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/andreyvit/2921703&quot;&gt;Tmux cheatsheet&lt;/a&gt; Tmux cheatsheet&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Trello for tasks management Pomello App Pomello turns your Trello cards into Pomodoro® tasks. Tmux cheatsheet Tmux cheatsheet</summary></entry></feed>